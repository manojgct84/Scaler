package dc.advance.Sorting3.reversion.homework;

import java.util.Arrays;

/**
 * All possible magical numbers:-
 * sub1 = {3, 11}, sub2 = {-1, 5}, Magic Number = abs(3 - -1) + abs(11 - 5) = 10
 * sub1 = {3, -1}, sub2 = {11, 5}, Magic Number = abs(3 - 11) + abs(-1 - 5) = 14
 * sub1 = {3, 5}, sub2 = {11, -1}, Magic Number = abs(3 - 11) + abs(5 - -1) = 14
 * sub1 = {11, -1}, sub2 = {3, 5}, Magic Number = abs(11 - 3) + abs(-1 - 5) = 14
 * sub1 = {11, 5}, sub2 = {3, -1}, Magic Number = abs(11 - 3) + abs(5 - -1) = 14
 * sub1 = {-1, 5}, sub2 = {3, 11}, Magic Number = abs(-1 - 3) + abs(5 - 11) = 10
 * maximum of all magic number = 14 % 10^9 + 7 = 14
 * minimum of all magic number = 10 % 10^9 + 7 = 10
 */
public class MaximumMinimumMagic {

    public static void main(String[] args) {
        System.out.println(Arrays.toString(solve(new int[]{3, 11, -1, 5})));
        System.out.println(Arrays.toString(solve(new int[]{2, 2})));
        System.out.println(Arrays.toString(solve(new int[]{-1000000000, -1000000000, -1000000000,
                -1000000000, -1000000000, -1000000000, -1000000000, -1000000000, -1000000000,
})));

    }

    public static int[] solve(int[] A) {
        Arrays.sort(A);
        int mod = 1000000007;
        int i = 0;
        int j = A.length;
        long max = 0;
        long min = 0;
        while (i < (A.length / 2) && j >= 0) {
            max = max + Math.abs(A[i] - A[j - 1]);
            i++;
            j--;
        }
        i = 0;
        while (i < A.length) {
            min = min + Math.abs(A[i + 1] - A[i]);
            i += 2;
        }
        return new int[]{(int) (max % mod), (int) (min % mod)};
    }
}
